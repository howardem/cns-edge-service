spring:
  application:
    name: egde-service

  config:
    import: "optional:configserver:"

  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false  # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1

    gateway:
      default-filters:
      - SaveSession
      - name: RequestRateLimiter
        args:
          redis-rate-limiter:
            replenishRate: 10
            burstCapacity: 20
            requestedTokens: 1
      - name: Retry
        args:
          retries: 3
          methods: GET
          series: SERVER_ERROR
          exceptions: java.io.IOException, java.util.concurrent.TimeoutException
          backoff:
            firstBackoff: 50ms
            maxBackOff: 500ms
            factor: 2
            basedOnPreviousValue: false
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          max-idle-time: 15s
          max-life-time: 60s
      redis-rate-limiter:
        include-headers: false    
      routes:
      - id: catalog-service
        uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
        predicates:
        - Path=/books/**
        filters:
        - name: CircuitBreaker
          args:
            name: catalogCircuitBreaker
            fallbackUri: forward:/catalog-fallback
      - id: order-service
        uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
        predicates:
        - Path=/orders/**
        filters:
        - name: CircuitBreaker
          args:
            name: orderCircuitBreaker
      - id: spa-ui
        uri: ${SPA_URL:http://localhost:9004}
        predicates:
        - Path=/,/*.css,/*.js,/favicon.ico
        filters:
        - name: CircuitBreaker
          args:
            name: orderCircuitBreaker

  lifecycle:
    timeout-per-shutdown-phase: 15s

  redis:
    connect-timeout: 2s
    timeout: 1s

  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
#            client-secret: LVBFBrxltcf3pwtOmYnuDgNBHjXV7vXA
            scope: openid
        provider:
          keycloak:
            issuer-uri: http://localhost:9999/realms/PolarBookshop

  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 20
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15s
  timelimiter:
    configs:
      default:
        timeout-duration: 5s

server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

logging:
  level:
    '[io.github.resilience4j]': debug